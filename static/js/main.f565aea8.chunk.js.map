{"version":3,"sources":["App.tsx","../../src/index.tsx","index.tsx"],"names":["App","filteredUsers","items","queryParams","window","parseBooleans","arrayFormat","Object","item","value","console","filters","useFilterFromQueryParams","id","isActive","isFinalized","style","textAlign","href","map","user","toString","ReactDOM","render","document","getElementById"],"mappings":"2LAyCeA,EAtCH,WAMV,IAYMC,ECViCC,Y,MACvC,MAAY,MAAO,GACnB,IAAMC,EAAc,gBAASC,gBAAT,OAAiC,CACnDC,eADmD,EAEnDC,YAAa,UAGf,OAAI,UAACC,cAAD,iBAACA,EAAL,OAEOL,EAAA,QAAcM,YAUnB,OATgBD,OAAA,gBAAgC,mCAAC,EAAD,YAC9C,yBAAWE,GACTC,yIAGA,GAEKF,OAAP,KAEMG,UAAR,MAZ8CT,EDG1BU,CAZA,CACpB,CACEC,GAAI,EACJC,UAAU,EACVC,aAAa,GAEf,CACEF,GAAI,EACJC,UAAU,EACVC,aAAa,KAIjB,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,6BACE,wCACA,uBAAGC,KAAK,6BAAR,mBACA,6BACA,uBAAGA,KAAK,gCAAR,uBAEDjB,EAAckB,KAAI,SAACC,GAAD,OACjB,oCACE,mCAASA,EAAKP,IACd,yCAAeO,EAAKN,SAASO,YAC7B,4CAAkBD,EAAKL,YAAYM,kBE5B7CC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f565aea8.chunk.js","sourcesContent":["import React from 'react'\nimport { useFilterFromQueryParams } from 'qs-filter'\n\nconst App = () => {\n  type User = {\n    id: number\n    isActive: boolean\n    isFinalized: boolean\n  }\n  const users: User[] = [\n    {\n      id: 1,\n      isActive: true,\n      isFinalized: false\n    },\n    {\n      id: 2,\n      isActive: false,\n      isFinalized: true\n    }\n  ]\n  const filteredUsers = useFilterFromQueryParams(users)\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <div>\n        <h1>Examples</h1>\n        <a href='/qs-filter/?isActive=true'>/?isActive=true</a>\n        <br />\n        <a href='/qs-filter/?isFinalized=true'>/?isFinalized=true</a>\n      </div>\n      {filteredUsers.map((user) => (\n        <>\n          <p>Id : {user.id}</p>\n          <p>isActive : {user.isActive.toString()}</p>\n          <p>isFinalized : {user.isFinalized.toString()}</p>\n        </>\n      ))}\n    </div>\n  )\n}\n\nexport default App\n","import * as qs from 'query-string'\n\ninterface Item {\n  [key: string]: any\n}\n/**\n * @description Attention, pour le moment seul les query params de type boolean sont pris en compte\n * @param items array d'items à filtrer\n * @returns items filtrés selon les query params\n * @example const filteredUsers = useFilterFromQueryParams(users)\n */\nexport const useFilterFromQueryParams = (items: Item[]): Item[] => {\n  if (!items) return []\n  const queryParams = qs.parse(window.location.search, {\n    parseBooleans: true,\n    arrayFormat: 'comma'\n  })\n\n  if (!Object.values(queryParams)?.length) return items\n\n  return items.filter((item) => {\n    const filters = Object.entries(queryParams).map(([key, value]) => {\n      if (typeof value !== 'boolean') {\n        console.error(\n          `⚠️ Type \"${typeof value}\" is not supported by useFilterFromQueryParams yet. This filter will be ignored`\n        )\n        return true\n      }\n      return item[key] === value\n    })\n    return !filters.includes(false)\n  })\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}